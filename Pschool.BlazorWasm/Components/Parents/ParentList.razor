@page "/parents"
@using Pschool.Core.DTOs
@inject IParentService ParentService

<h3>Parents/Guardians List</h3>

<button class="btn btn-success mb-3" @onclick="AddNewParent">Add Parent</button>
<button class="btn btn-primary mb-3" @onclick="SaveList">Save List</button>

<input type="text" placeholder="Search" class="form-control mb-3" @bind="searchQuery" @oninput="SearchParents" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<table class="table">
    <thead>
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Username</th>
        <th>Email</th>
        <th>Home Address</th>
        <th>Phone 1</th>
        <th>Work Phone</th>
        <th>Home Phone</th>
        <th>Siblings</th>
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
    @if (filteredParents != null && filteredParents.Any())
    {
        @foreach (var parent in filteredParents)
        {
            <tr @key="parent.Id">
                @if (editingParentId == parent.Id)
                {
                    <td>
                        <input type="text" class="form-control" @bind="parent.FirstName"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" @bind="parent.LastName"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" @bind="parent.Username"/>
                    </td>
                    <td>
                        <input type="email" class="form-control" @bind="parent.Email"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" @bind="parent.HomeAddress"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" @bind="parent.Phone1"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" @bind="parent.WorkPhone"/>
                    </td>
                    <td>
                        <input type="text" class="form-control" @bind="parent.HomePhone"/>
                    </td>
                    <td>
                        <input type="number" class="form-control" @bind="parent.Siblings"/>
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="() => SaveParent(parent)">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </td>
                }
                else
                {
                    <td>@parent.FirstName</td>
                    <td>@parent.LastName</td>
                    <td>@parent.Username</td>
                    <td>@parent.Email</td>
                    <td>@parent.HomeAddress</td>
                    <td>@parent.Phone1</td>
                    <td>@parent.WorkPhone</td>
                    <td>@parent.HomePhone</td>
                    <td>@parent.Siblings</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditParent(parent.Id)">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteParent(parent.Id)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                }
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="10">No parents found.</td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<ParentDto>? parents = new();
    private List<ParentDto>? filteredParents = new();
    private int? editingParentId = null;
    private bool isAddingNewParent = false;
    private string errorMessage = string.Empty;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadParentsAsync();
    }

    private async Task LoadParentsAsync()
    {
        try
        {
            parents = await ParentService.GetAllParentsAsync();
            filteredParents = parents;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching parents: {ex.Message}";
        }
    }

    private void SearchParents(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredParents = parents?.Where(p => p.FirstName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                  p.LastName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                  p.Username.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                  p.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredParents = parents;
        }
    }

    private void EditParent(int id)
    {
        CancelEdit();
        editingParentId = id;
    }

    private void AddNewParent()
    {
        CancelEdit();
        isAddingNewParent = true;
        parents?.Add(new ParentDto { Id = 0 });
        editingParentId = parents?.Last().Id;
    }

    private void CancelEdit()
    {
        editingParentId = null;
        isAddingNewParent = false;
        if (parents != null && parents.Any(p => p.Id == 0))
        {
            var newParent = parents.FirstOrDefault(p => p.Id == 0);
            if (newParent != null)
            {
                parents.Remove(newParent);
            }
        }
    }

    private async Task SaveParent(ParentDto parent)
    {
        try
        {
            if (parent.Id > 0)
            {
                await ParentService.UpdateParentAsync(parent.Id, parent);
            }
            else
            {
                await ParentService.AddParentAsync(parent);
            }

            await LoadParentsAsync();
            editingParentId = null;
            isAddingNewParent = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving parent: {ex.Message}";
        }
    }

    private async Task DeleteParent(int id)
    {
        try
        {
            await ParentService.DeleteParentAsync(id);
            await LoadParentsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting parent: {ex.Message}";
        }
    }

    private void SaveList()
    {
        // Implement the save list functionality
    }
}
